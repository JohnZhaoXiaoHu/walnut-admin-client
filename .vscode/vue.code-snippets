{
  "vue-comp": {
    "scope": "vue",
    "prefix": "vue3-comp",
    "body": [
      "<template>",
      "  <div>Vue3-Component</div>",
      "</template>",
      "",
      "<script lang='ts'>",
      "  export default defineComponent({",
      "    name: 'Component',",
      "",
      "    inheritAttrs: false,",
      "",
      "    components: {},",
      "",
      "    props: {},",
      "",
      "    emits: [],",
      "",
      "    setup(props, ctx) {},",
      "  })",
      "</script>",
    ],
    "description": "vue3 component template"
  },
  "vue-view": {
    "scope": "vue",
    "prefix": "vue3-view",
    "body": [
      "<template>",
      "  <div>Vue3-View</div>",
      "</template>",
      "",
      "<script lang='ts'>",
      "  export default defineComponent({",
      "    name: 'View',",
      "",
      "    components: {},",
      "",
      "    setup() {},",
      "  })",
      "</script>",
      "",
      "<style lang='scss' scoped></style>",
      ""
    ],
    "description": "vue3 view template"
  },
  "vue-tsx": {
    "scope": "vue",
    "prefix": "vue3-tsx",
    "body": [
      "<script lang='tsx'>",
      "  export default defineComponent({",
      "    name: 'Component',",
      "",
      "    inheritAttrs: false,",
      "",
      "    components: {},",
      "",
      "    props: {},",
      "",
      "    emits: [],",
      "",
      "    setup(props, { attrs, slots, emit, expose }) {},",
      "  })",
      "</script>",
    ],
    "description": "vue3 tsx template"
  },
  "vue-setup": {
    "scope": "vue",
    "prefix": "vue3-setup",
    "body": [
      "<template>",
      "  <div>Vue3-View</div>",
      "</template>",
      "",
      "<script lang='ts' setup>",
      "  const state = ref()",
      "</script>",
      "",
      "<script lang='ts'>",
      "  export default defineComponent({",
      "    name: 'Name',",
      "  })",
      "</script>",
    ],
    "description": "vue3 setup template"
  },
  "walnut-form-basic": {
    "prefix": "w-form-basic",
    "body": [
      "<template>\r",
      "  <w-form @hook=\"register\" :model=\"formData\"></w-form>\r",
      "</template>\r",
      "\r",
      "<script lang=\"ts\" setup>\r",
      "  const formData = ref({\r",
      "    field1: '',\r",
      "    field2: '',\r",
      "    field3: '',\r",
      "    field4: '',\r",
      "  })\r",
      "\r",
      "  const loading = ref(false)\r",
      "\r",
      "  const onSubmit = async () => {\r",
      "    const valid = await validate()\r",
      "\r",
      "    if (valid) {\r",
      "      loading.value = true\r",
      "\r",
      "      try {\r",
      "        // call api here\r",
      "        console.log(formData)\r",
      "      } finally {\r",
      "        loading.value = false\r",
      "      }\r",
      "    }\r",
      "  }\r",
      "\r",
      "  const [register, { validate }] = useForm<typeof formData>({\r",
      "    disabled: loading,\r",
      "    labelWidth: '80px',\r",
      "    schemas: [\r",
      "      {\r",
      "        type: 'Base:Input',\r",
      "        formProp: {\r",
      "          label: 'Label 1',\r",
      "          path: 'field1',\r",
      "          rule: [\r",
      "            {\r",
      "              type: 'string',\r",
      "              min: 8,\r",
      "              max: 16,\r",
      "              required: true,\r",
      "              message: 'Field1 is required !',\r",
      "            },\r",
      "          ],\r",
      "        },\r",
      "        componentProp: {\r",
      "          clearable: true,\r",
      "        },\r",
      "      },\r",
      "      {\r",
      "        type: 'Base:Button',\r",
      "        formProp: {\r",
      "          showFeedback: false,\r",
      "        },\r",
      "        componentProp: {\r",
      "          textProp: 'Submit Button',\r",
      "          loading: loading,\r",
      "          disabled: loading,\r",
      "          onClick: onSubmit,\r",
      "        },\r",
      "      },\r",
      "    ],\r",
      "  })\r",
      "</script>\r",
      "\r",
      "<script lang=\"ts\">\r",
      "  export default defineComponent({\r",
      "    name: 'SignUp',\r",
      "\r",
      "    defaultView: false,\r",
      "  })\r",
      "</script>\r",
      ""
    ],
    "description": "walnut basic form with validate & loading & api calling"
  }
}