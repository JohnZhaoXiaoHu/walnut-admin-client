{
    "prettier.configPath": "config/prettier/.prettierrc.js",
    "prettier.ignorePath": "config/prettier/.prettierignore",
    "prettier.bracketSameLine": true,
    "prettier.jsxSingleQuote": true,
    "prettier.semi": false,
    "prettier.singleQuote": true,
    "prettier.useEditorConfig": false,
    "eslint.options": {
        "extensions": [
            ".ts",
            ".vue"
        ]
    },
    "eslint.validate": [
        "javascript",
        "typescript",
        "vue"
    ],
    "eslint.alwaysShowStatus": true,
    "i18n-ally.localesPaths": [
        "src/locales/dev"
    ],
    "i18n-ally.sortKeys": true,
    "i18n-ally.keepFulfilled": true,
    "i18n-ally.enabledParsers": [
        "ts"
    ],
    "i18n-ally.sourceLanguage": "zh",
    "i18n-ally.enabledFrameworks": [
        "vue"
    ],
    "volar.codeLens.pugTools": false,
    "volar.takeOverMode.enabled": "auto",
    "[vue]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[ts]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[js]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[scss]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "i18n-ally.keystyle": "nested",
    "explorer.experimental.fileNesting.enabled": true,
    "explorer.experimental.fileNesting.expand": false,
    "explorer.experimental.fileNesting.patterns": {
        ".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",
        "*.js": "$(capture).js.map, $(capture).min.js, $(capture).d.ts",
        "*.jsx": "$(capture).js",
        "*.ts": "$(capture).js, $(capture).*.ts",
        "*.tsx": "$(capture).ts",
        "*.vue": "$(capture).*.ts, $(capture).*.js",
        "index.d.ts": "*.d.ts",
        "shims.d.ts": "*.d.ts",
        "*.cpp": "$(capture).hpp, $(capture).h, $(capture).hxx",
        "*.cxx": "$(capture).hpp, $(capture).h, $(capture).hxx",
        "*.cc": "$(capture).hpp, $(capture).h, $(capture).hxx",
        "*.c": "$(capture).h",
        "go.mod": ".air*, go.sum",
        "default.nix": "shell.nix",
        "flake.nix": "flake.lock",
        "BUILD.bazel": "*.bzl, *.bazel, *.bazelrc, bazel.rc, .bazelignore, .bazelproject, WORKSPACE",
        "CMakeLists.txt": "*.cmake, *.cmake.in, .cmake-format.yaml, CMakePresets.json",
        ".clang-tidy": ".clang-format",
        ".env": "*.env, .env.*, env.d.ts",
        "dockerfile": ".dockerignore, dockerfile*",
        "package.json": ".browserslist*, .circleci*, .codecov, .commitlint*, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .mocha*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .releaserc*, .sentry*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, api-extractor.json, appveyor*, ava.config.*, azure-pipelines*, bower.json, build.config.*, commitlint*, crowdin*, cypress.json, dangerfile*, dprint.json, firebase.json, grunt*, gulp*, jasmine.*, jenkins*, jest.config.*, jsconfig.*, karma*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, nx.*, package-lock.json, playwright.config.*, pm2.*, pnpm*, prettier*, pullapprove*, puppeteer.config.*, renovate*, rollup.config.*, stylelint*, tsconfig.*, tsdoc.*, tslint*, tsup.config.*, turbo*, typedoc*, vercel*, vetur.config.*, vitest.config.*, webpack.config.*, workspace.json, xo.config.*, yarn*",
        "rush.json": ".browserslist*, .circleci*, .codecov, .commitlint*, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .mocha*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .releaserc*, .sentry*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, api-extractor.json, appveyor*, ava.config.*, azure-pipelines*, bower.json, build.config.*, commitlint*, crowdin*, cypress.json, dangerfile*, dprint.json, firebase.json, grunt*, gulp*, jasmine.*, jenkins*, jest.config.*, jsconfig.*, karma*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, nx.*, package-lock.json, playwright.config.*, pm2.*, pnpm*, prettier*, pullapprove*, puppeteer.config.*, renovate*, rollup.config.*, stylelint*, tsconfig.*, tsdoc.*, tslint*, tsup.config.*, turbo*, typedoc*, vercel*, vetur.config.*, vitest.config.*, webpack.config.*, workspace.json, xo.config.*, yarn*",
        "readme.*": "authors, backers.md, changelog*, citation*, code_of_conduct.md, codeowners, contributing.md, contributors, copying, credits, governance.md, history.md, license*, maintainers, readme*, security.md, sponsors.md",
        "cargo.toml": ".clippy.toml, .rustfmt.toml, cargo.lock, clippy.toml, cross.toml, rust-toolchain.toml, rustfmt.toml",
        "gemfile": ".ruby-version, gemfile.lock",
        "composer.json": ".php*.cache, composer.lock, phpunit.xml*, psalm*.xml",
        "vite.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, index.html, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
        "vue.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
        "nuxt.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
        "next.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, next-env.d.ts, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
        "svelte.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, mdsvex.config.js, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
        "remix.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, remix.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
        "artisan": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, server.php, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, webpack.mix.js, windi.config.*",
        "astro.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .htmlnanorc*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, cssnano.config.*, cypress.json, env.d.ts, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*"
    },
    "json.schemas": [
        {
            "fileMatch": [
                "src/settings.json"
            ],
            "schema": {
                "type": "object",
                "properties": {
                    "app": {
                        "$ref": "#/definitions/AppSettingsForApp"
                    },
                    "themes": {
                        "$ref": "#/definitions/AppSettingsForTheme"
                    },
                    "logo": {
                        "$ref": "#/definitions/AppSettingsForLogo"
                    },
                    "header": {
                        "$ref": "#/definitions/AppSettingsForHeader"
                    },
                    "tabs": {
                        "$ref": "#/definitions/AppSettingsForTabs"
                    },
                    "breadcrumb": {
                        "$ref": "#/definitions/AppSettingsForBreadcrumb"
                    },
                    "menu": {
                        "$ref": "#/definitions/AppSettingsForMenu"
                    },
                    "footer": {
                        "$ref": "#/definitions/AppSettingsForFooter"
                    }
                },
                "required": [
                    "app",
                    "breadcrumb",
                    "footer",
                    "header",
                    "logo",
                    "menu",
                    "tabs",
                    "themes"
                ],
                "definitions": {
                    "AppSettingsForApp": {
                        "type": "object",
                        "properties": {
                            "layout": {
                                "$ref": "#/definitions/ValueOfAppConstLayoutMode",
                                "description": "App Layout",
                                "default": "left-menu"
                            },
                            "keepAlive": {
                                "description": "Keep Alive component, vue features",
                                "default": true,
                                "type": "boolean"
                            },
                            "contentPadding": {
                                "description": "Content padding px",
                                "default": 2,
                                "type": "number"
                            },
                            "routeQueryMode": {
                                "$ref": "#/definitions/ValueOfAppConstRouteQueryMode",
                                "description": "Rotue Query Features\n'normal' => no change to route query\n'enhanced' => make route query unreadable",
                                "default": "normal"
                            },
                            "routeQueryEnhancedMode": {
                                "$ref": "#/definitions/ValueOfAppConstRouteQueryEnhancedMode",
                                "description": "Route Query Enhanced Mode\nOnly works when `routeQueryMode` => 'enhanced'\n'base64' => stringify and transform to base64\n'cryptojs' => use `crypto-js` to encrypt/decrypt route query",
                                "default": "base64"
                            },
                            "transitionStatus": {
                                "description": "Transition Component, vue features",
                                "default": true,
                                "type": "boolean"
                            },
                            "transitionMode": {
                                "$ref": "#/definitions/ValueOfAppConstBasicMode",
                                "description": "Transition Mode\n'global' => use `transitionName` for transition name\n'scope' => use the transition info in route `meta` object",
                                "default": "scope"
                            },
                            "transitionName": {
                                "$ref": "#/definitions/ValueOfAppConstTransitionName",
                                "description": "Global Transition Name\nOnly works when `transitionMode` => 'global'",
                                "default": "fade"
                            },
                            "watermarkStatus": {
                                "description": "Watermark features on use or not",
                                "default": true,
                                "type": "boolean"
                            },
                            "watermarkMode": {
                                "$ref": "#/definitions/ValueOfAppConstBasicMode",
                                "description": "Watermark Mode\n'global' => use `watermarkContent` for watermark content\n'scope' => use the watermark info in route `meta` object",
                                "default": "scope"
                            },
                            "watermarkContent": {
                                "description": "Global Watermark Content\nOnly works when `watermarkMode` => 'global'",
                                "default": "walnut-admin",
                                "type": "string"
                            },
                            "lockStatus": {
                                "description": "Lock Features on use or not",
                                "default": true,
                                "type": "boolean"
                            },
                            "lockMode": {
                                "$ref": "#/definitions/ValueOfAppConstLockMode",
                                "description": "Lock Mode\n'default' => user can manually to lock tha application\n'security' => more secure usage, app would lock when user's mouse leave the app or change the browser/system tabs\n'idle' => app would auto lock when user is idle for some time",
                                "default": "default"
                            },
                            "lockIdleSeconds": {
                                "description": "User inactive seconds to lock app",
                                "default": 5,
                                "type": "number"
                            },
                            "colorMode": {
                                "$ref": "#/definitions/ValueOfAppConstColorMode",
                                "description": "More UX config, just different css tricks to fitler the app in view",
                                "default": "default"
                            },
                            "reducedMotion": {
                                "description": "More UX config, for those who cannot see animation viewing the internet",
                                "default": false,
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "colorMode",
                            "contentPadding",
                            "keepAlive",
                            "layout",
                            "lockIdleSeconds",
                            "lockMode",
                            "lockStatus",
                            "reducedMotion",
                            "routeQueryEnhancedMode",
                            "routeQueryMode",
                            "transitionMode",
                            "transitionName",
                            "transitionStatus",
                            "watermarkContent",
                            "watermarkMode",
                            "watermarkStatus"
                        ]
                    },
                    "ValueOfAppConstLayoutMode": {
                        "enum": [
                            "left-menu",
                            "top-menu"
                        ],
                        "type": "string"
                    },
                    "ValueOfAppConstRouteQueryMode": {
                        "enum": [
                            "enhanced",
                            "normal"
                        ],
                        "type": "string"
                    },
                    "ValueOfAppConstRouteQueryEnhancedMode": {
                        "enum": [
                            "base64",
                            "cryptojs"
                        ],
                        "type": "string"
                    },
                    "ValueOfAppConstBasicMode": {
                        "enum": [
                            "global",
                            "scope"
                        ],
                        "type": "string"
                    },
                    "ValueOfAppConstTransitionName": {
                        "enum": [
                            "back-down",
                            "back-left",
                            "back-right",
                            "back-up",
                            "bounce",
                            "bounce-down",
                            "bounce-left",
                            "bounce-right",
                            "bounce-up",
                            "fade",
                            "fade-bottomLeft",
                            "fade-bottomRight",
                            "fade-down",
                            "fade-down-big",
                            "fade-left",
                            "fade-left-big",
                            "fade-right",
                            "fade-right-big",
                            "fade-topLeft",
                            "fade-topRight",
                            "fade-up",
                            "fade-up-big",
                            "flip-x",
                            "flip-y",
                            "rotate",
                            "rotate-downLeft",
                            "rotate-downRight",
                            "rotate-upLeft",
                            "rotate-upRight",
                            "slide-down",
                            "slide-left",
                            "slide-right",
                            "slide-up",
                            "zoom",
                            "zoom-down",
                            "zoom-left",
                            "zoom-right",
                            "zoom-up"
                        ],
                        "type": "string"
                    },
                    "ValueOfAppConstLockMode": {
                        "enum": [
                            "default",
                            "idle",
                            "security"
                        ],
                        "type": "string"
                    },
                    "ValueOfAppConstColorMode": {
                        "enum": [
                            "cafe",
                            "contrast",
                            "default",
                            "grayscale",
                            "grayscale-inverted",
                            "inverted"
                        ],
                        "type": "string"
                    },
                    "AppSettingsForTheme": {
                        "type": "object",
                        "properties": {
                            "light": {
                                "type": "object",
                                "properties": {
                                    "primaryColor": {
                                        "type": "string"
                                    },
                                    "infoColor": {
                                        "type": "string"
                                    },
                                    "successColor": {
                                        "type": "string"
                                    },
                                    "warningColor": {
                                        "type": "string"
                                    },
                                    "errorColor": {
                                        "type": "string"
                                    },
                                    "bodyColor": {
                                        "type": "string"
                                    },
                                    "invertedColor": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "bodyColor",
                                    "errorColor",
                                    "infoColor",
                                    "invertedColor",
                                    "primaryColor",
                                    "successColor",
                                    "warningColor"
                                ]
                            },
                            "dark": {
                                "type": "object",
                                "properties": {
                                    "primaryColor": {
                                        "type": "string"
                                    },
                                    "infoColor": {
                                        "type": "string"
                                    },
                                    "successColor": {
                                        "type": "string"
                                    },
                                    "warningColor": {
                                        "type": "string"
                                    },
                                    "errorColor": {
                                        "type": "string"
                                    },
                                    "bodyColor": {
                                        "type": "string"
                                    },
                                    "invertedColor": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "bodyColor",
                                    "errorColor",
                                    "infoColor",
                                    "invertedColor",
                                    "primaryColor",
                                    "successColor",
                                    "warningColor"
                                ]
                            }
                        },
                        "required": [
                            "dark",
                            "light"
                        ]
                    },
                    "AppSettingsForLogo": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Dom id",
                                "type": "string"
                            },
                            "fixed": {
                                "description": "True => fixed, false => normal",
                                "type": "boolean"
                            },
                            "status": {
                                "description": "True => using, false => hidden",
                                "type": "boolean"
                            },
                            "transition": {
                                "$ref": "#/definitions/ValueOfAppConstTransitionName",
                                "description": "Logo transition name"
                            }
                        },
                        "required": [
                            "fixed",
                            "id",
                            "status",
                            "transition"
                        ]
                    },
                    "AppSettingsForHeader": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Dom id",
                                "type": "string"
                            },
                            "fixed": {
                                "description": "True => fixed, false => normal",
                                "type": "boolean"
                            },
                            "status": {
                                "description": "True => using, false => hidden",
                                "type": "boolean"
                            },
                            "transition": {
                                "$ref": "#/definitions/ValueOfAppConstTransitionName",
                                "description": "Header transition name"
                            },
                            "inverted": {
                                "description": "Header inverted",
                                "type": "boolean"
                            },
                            "height": {
                                "description": "Header height",
                                "type": "number"
                            },
                            "fullscreen": {
                                "description": "Header utils - full screen visibility",
                                "type": "boolean"
                            },
                            "search": {
                                "description": "Header utils - search visibility",
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "fixed",
                            "fullscreen",
                            "height",
                            "id",
                            "inverted",
                            "search",
                            "status",
                            "transition"
                        ]
                    },
                    "AppSettingsForTabs": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Dom id",
                                "type": "string"
                            },
                            "fixed": {
                                "description": "True => fixed, false => normal",
                                "type": "boolean"
                            },
                            "status": {
                                "description": "True => using, false => hidden",
                                "type": "boolean"
                            },
                            "inverted": {
                                "description": "Tabs inverted",
                                "type": "boolean"
                            },
                            "transition": {
                                "$ref": "#/definitions/ValueOfAppConstTransitionName",
                                "description": "Tabs transition name"
                            },
                            "height": {
                                "description": "Tab height",
                                "type": "number"
                            },
                            "itemWidth": {
                                "description": "Tab item width",
                                "type": "number"
                            },
                            "showIcon": {
                                "description": "Tab icon visibility",
                                "type": "boolean"
                            },
                            "showUtils": {
                                "description": "Tab aside utils visibility",
                                "type": "boolean"
                            },
                            "utilsMode": {
                                "$ref": "#/definitions/ValueOfAppConstTabUtilsShowMode",
                                "description": "Tab aside utils display mode"
                            },
                            "contextMenu": {
                                "description": "Tab context menu visibility",
                                "type": "boolean"
                            },
                            "sortable": {
                                "description": "Tab sortable",
                                "type": "boolean"
                            },
                            "styleMode": {
                                "$ref": "#/definitions/ValueOfAppConstTabStyleMode",
                                "description": "Tab style mode"
                            },
                            "persistent": {
                                "description": "With persistent support",
                                "type": "boolean"
                            },
                            "itemTransition": {
                                "$ref": "#/definitions/ValueOfAppConstTransitionName",
                                "description": "Tab item animation name"
                            },
                            "closeMode": {
                                "$ref": "#/definitions/ValueOfAppConstTabCloseMode",
                                "description": "Tab close mode"
                            },
                            "affixMode": {
                                "$ref": "#/definitions/ValueOfAppConstTabAffixMode",
                                "description": "Tab affix mode"
                            }
                        },
                        "required": [
                            "affixMode",
                            "closeMode",
                            "contextMenu",
                            "fixed",
                            "height",
                            "id",
                            "inverted",
                            "itemTransition",
                            "itemWidth",
                            "persistent",
                            "showIcon",
                            "showUtils",
                            "sortable",
                            "status",
                            "styleMode",
                            "transition",
                            "utilsMode"
                        ]
                    },
                    "ValueOfAppConstTabUtilsShowMode": {
                        "enum": [
                            "always",
                            "overflow"
                        ],
                        "type": "string"
                    },
                    "ValueOfAppConstTabStyleMode": {
                        "enum": [
                            "card",
                            "flex",
                            "round"
                        ],
                        "type": "string"
                    },
                    "ValueOfAppConstTabCloseMode": {
                        "enum": [
                            "always",
                            "hover"
                        ],
                        "type": "string"
                    },
                    "ValueOfAppConstTabAffixMode": {
                        "enum": [
                            "icon",
                            "pin"
                        ],
                        "type": "string"
                    },
                    "AppSettingsForBreadcrumb": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Dom id",
                                "type": "string"
                            },
                            "status": {
                                "description": "True => using, false => hidden",
                                "type": "boolean"
                            },
                            "transition": {
                                "$ref": "#/definitions/ValueOfAppConstTransitionName",
                                "description": "Breadcrumb transition name"
                            },
                            "showIcon": {
                                "description": "Breadcrumb icon visibility",
                                "type": "boolean"
                            },
                            "showDropdown": {
                                "description": "Breadcrumb dropdown visibility",
                                "type": "boolean"
                            },
                            "separator": {
                                "description": "Breadcrumb custom separator",
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "separator",
                            "showDropdown",
                            "showIcon",
                            "status",
                            "transition"
                        ]
                    },
                    "AppSettingsForMenu": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Dom id",
                                "type": "string"
                            },
                            "status": {
                                "description": "True => using, false => hidden",
                                "type": "boolean"
                            },
                            "transition": {
                                "$ref": "#/definitions/ValueOfAppConstTransitionName",
                                "description": "Menu transition name"
                            },
                            "inverted": {
                                "description": "Menu inverted color",
                                "type": "boolean"
                            },
                            "width": {
                                "description": "When app layout is `left-menu`, menu width",
                                "type": "number"
                            },
                            "accordion": {
                                "description": "Menu accordion",
                                "type": "boolean"
                            },
                            "iconSize": {
                                "description": "Menu icon size",
                                "type": "number"
                            },
                            "indent": {
                                "description": "Menu indent",
                                "type": "number"
                            },
                            "collapseStatus": {
                                "description": "Show collapse button",
                                "type": "boolean"
                            },
                            "collapsedIconSize": {
                                "description": "Menu collapsed icon size",
                                "type": "number"
                            },
                            "collapseMode": {
                                "$ref": "#/definitions/ValueOfAppConstCollapseMode",
                                "description": "Menu Collapse Mode"
                            },
                            "collapsedWidth": {
                                "description": "When app layout is `left-menu`, menu collapsed width",
                                "type": "number"
                            }
                        },
                        "required": [
                            "accordion",
                            "collapseMode",
                            "collapseStatus",
                            "collapsedIconSize",
                            "collapsedWidth",
                            "iconSize",
                            "id",
                            "indent",
                            "inverted",
                            "status",
                            "transition",
                            "width"
                        ]
                    },
                    "ValueOfAppConstCollapseMode": {
                        "enum": [
                            "arrow-circle",
                            "bar",
                            "button",
                            "icon"
                        ],
                        "type": "string"
                    },
                    "AppSettingsForFooter": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Dom id",
                                "type": "string"
                            },
                            "fixed": {
                                "description": "True => fixed, false => normal",
                                "type": "boolean"
                            },
                            "status": {
                                "description": "True => using, false => hidden",
                                "type": "boolean"
                            },
                            "inverted": {
                                "description": "Footer inverted",
                                "type": "boolean"
                            },
                            "transition": {
                                "$ref": "#/definitions/ValueOfAppConstTransitionName",
                                "description": "Footer transition name"
                            },
                            "height": {
                                "description": "Footer height",
                                "type": "number"
                            },
                            "content": {
                                "description": "Footer content",
                                "type": "string"
                            }
                        },
                        "required": [
                            "content",
                            "fixed",
                            "height",
                            "id",
                            "inverted",
                            "status",
                            "transition"
                        ]
                    }
                },
                "$schema": "http://json-schema.org/draft-07/schema#"
            }
        }
    ]
}